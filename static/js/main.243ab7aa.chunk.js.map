{"version":3,"sources":["ts/store/index.ts","ts/components/hero/index.tsx","ts/components/skills/index.tsx","ts/components/skills/item/index.tsx","ts/theme/theme.ts","ts/theme/index.tsx","ts/serviceWorker.ts","ts/index.tsx","ts/components/index.tsx"],"names":["context","React","createContext","store","hero","props","react_default","a","createElement","Consumer","value","className","title","subtitle","SkillItem","styled","name","percentage","newProps","Object","objectWithoutProperties","data-tooltip","max","_templateObject","theme","colors","greyLight","skills","map","skill","i","key","knowledgeInPercentage","initialVariables","black","blackBis","blackTer","greyDarker","greyDark","grey","greyLighter","whiteTer","whiteBis","white","orange","yellow","green","turquoise","cyan","blue","purple","red","objectSpread","primary","info","success","warning","danger","light","dark","styledComponents","StyledTheme","default","ThemeProvider","css","keyframes","Boolean","window","location","hostname","match","ReactDOM","render","Provider","data","react","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.243ab7aa.chunk.js","sourcesContent":["import React from \"react\";\nimport store from \"./data.json\";\n\nconst context = React.createContext(store);\n\nexport default context;\n","import React from \"react\";\nimport Context from \"./../../store\";\n\ninterface Props extends React.HTMLProps<HTMLDivElement> { }\n\nexport default (props: Props) => {\n  return (\n    <Context.Consumer>\n      {value => (\n        <div {...props}>\n          <section className=\"hero is-fullheight has-background-white-ter\">\n            <div className=\"hero-body\">\n              <div className=\"container\">\n                <p className=\"title\">{value.hero.title}</p>\n                <p className=\"subtitle\">{value.hero.subtitle}</p>\n              </div>\n            </div>\n          </section>\n        </div>\n      )}\n    </Context.Consumer>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Item from \"./item\";\nimport Context from \"./../../store\";\n\nconst SkillItem = styled(Item)`\n  padding: 51px 0;\n  margin: -1px 0;\n  border-top: 1px solid ${props => props.theme.colors.greyLight};\n  border-bottom: 1px solid ${props => props.theme.colors.greyLight};\n  color: ${props => props.theme.colors.greyLight};\n`;\n\ninterface Props extends React.HTMLProps<HTMLDivElement> { }\n\nexport default (props: Props) => {\n  return (\n    <Context.Consumer>\n      {value => (\n        <div {...props}>\n          <section className=\"section is-large\">\n            <div className=\"container\">\n              {value.skills.map((skill, i) => <SkillItem key={i} name={skill.name} percentage={skill.knowledgeInPercentage} />)}\n            </div>\n          </section>\n        </div>\n      )}\n    </Context.Consumer>\n  );\n}\n","import React from \"react\";\n\ninterface Props extends React.HTMLProps<HTMLDivElement> {\n  name: string;\n  percentage: number;\n}\n\nexport default (props: Props) => {\n  const { name, percentage, ...newProps } = props;\n\n  return (\n    <div {...newProps}>\n      <div className=\"columns is-vcentered\">\n        <div className=\"column is-3\">\n          <p className=\"title\">{name}</p>\n        </div>\n        <div className=\"column\">\n          <div className=\"tooltip is-tooltip-right is-tooltip-top-touch\" data-tooltip={percentage + \"%\"}>\n            <progress className=\"progress is-large is-primary\" value={percentage} max=\"100\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","const initialVariables = {\n  colors: {\n    black: \"#0a0a0a\",\n    blackBis: \"#111111\",\n    blackTer: \"#232323\",\n\n    greyDarker: \"#353535\",\n    greyDark: \"#494949\",\n    grey: \"#7a7a7a\",\n    greyLight: \"#b5b5b5\",\n    greyLighter: \"#dbdbdb\",\n\n    whiteTer: \"#f4f4f4\",\n    whiteBis: \"#f9f9f9\",\n    white: \"#ffffff\",\n\n    orange: \"#F87D1C\",\n    yellow: \"#aa8800\",\n    green: \"#237a6d\",\n    turquoise: \"#006858\",\n    cyan: \"#125887\",\n    blue: \"#274b87\",\n    purple: \"#5d00b5\",\n    red: \"#9b001f\"\n  },\n  transition: {\n    time: \"400ms\"\n  }\n}\n\nconst theme = {\n  colors: {\n    primary: initialVariables.colors.orange,\n    info: initialVariables.colors.cyan,\n    success: initialVariables.colors.green,\n    warning: initialVariables.colors.yellow,\n    danger: initialVariables.colors.red,\n\n    light: initialVariables.colors.whiteTer,\n    dark: initialVariables.colors.greyDarker,\n\n    ...initialVariables.colors\n  }\n};\n\nexport default theme;\n","import * as React from \"react\";\nimport * as styledComponents from \"styled-components\";\nimport theme from \"./theme\";\n\nconst {\n  default: styled,\n  ThemeProvider: StyledTheme,\n  css,\n  keyframes\n} = styledComponents as styledComponents.ThemedStyledComponentsModule<typeof theme>;\n\nconst ThemeProvider: React.StatelessComponent = props => (\n    <StyledTheme theme={theme}>\n      <>{props.children}</>\n    </StyledTheme>\n);\n\nexport default styled;\nexport { ThemeProvider, css, keyframes };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components\";\nimport Context from \"./store\";\nimport { ThemeProvider } from \"./theme\";\nimport data from \"./store/data.json\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render((\n    <Context.Provider value={data}>\n      <ThemeProvider>\n        <App />\n      </ThemeProvider>\n    </Context.Provider>\n  ), document.getElementById(\"root\"));\nserviceWorker.unregister();\n","import React from \"react\";\nimport Navbar from \"./navbar\";\nimport Hero from \"./hero\";\nimport Skills from \"./skills\";\n\ninterface Props extends React.HTMLProps<HTMLDivElement> { }\n\nexport default (props: Props) => {\n  return (\n    <div {...props}>\n      {/* <Navbar /> */}\n      <Hero />\n      <Skills />\n    </div>\n  );\n}\n"],"sourceRoot":""}